{
  // ref: https://github.com/JuliaLang/julia/blob/master/src/julia-parser.scm
  parserClass='org.ice1000.julia.lang.JuliaParser'
  extends='com.intellij.extapi.psi.ASTWrapperPsiElement'
  psiClassPrefix='Julia'
  psiImplClassSuffix='Impl'
  psiPackage='org.ice1000.julia.lang.psi'
  psiImplPackage='org.ice1000.julia.lang.psi.impl'

  extends('.*Op')=expr

  tokenTypeClass='org.ice1000.julia.lang.JuliaTokenType'
  elementTypeHolderClass='org.ice1000.julia.lang.psi.JuliaTypes'
  elementTypeClass='org.ice1000.julia.lang.JuliaElementType'
  psiImplUtilClass='org.ice1000.julia.lang.psi.impl.JuliaPsiImplUtils'
}

juliaFile ::= endOfLine statements

macroIdentifier ::= AT_SYM identifier
symbol ::= SYM
identifier ::= identifierImpl
private identifierChain ::= endOfLine DOT_SYM endOfLine symbol
private identifierImpl ::= (symbol identifierChain*) | (symbol? identifierChain+)

private comment ::= BLOCK_COMMENT | LINE_COMMENT
string ::= STR | RAW_STR
integer ::= INT_LITERAL
float ::= FLOAT_LITERAL | FLOAT_CONSTANT
boolean ::= TRUE_KEYWORD | FALSE_KEYWORD
char ::= CHAR_LITERAL
regex ::= REGEX_LITERAL
byteArray ::= BYTE_ARRAY_LITERAL

private endOfLineImpl ::= EOL | comment
private endOfLine ::= endOfLineImpl*
private semi ::= endOfLineImpl | SEMICOLON_SYM
statements ::= semi* (statement (semi+ statement)*)? semi*

private statement ::=
   includeStatement
 | moduleDeclaration
 | exportStatement
 | importStatement
 | usingStatement
 | tryCatchStatement
 | returnStatement
 | breakStatement
 | continueStatement
 | expr

breakStatement ::= BREAK_KEYWORD
continueStatement ::= CONTINUE_KEYWORD
includeStatement ::=
 INCLUDE_KEYWORD endOfLine
  LEFT_BRACKET endOfLine
   string endOfLine
  RIGHT_BRACKET

exportStatement ::=
 EXPORT_KEYWORD endOfLine
  (identifier | macroIdentifier)
  (endOfLine COMMA_SYM endOfLine
   (identifier | macroIdentifier))*

importStatement ::=
 IMPORT_KEYWORD endOfLine
  identifier endOfLine
  (COLON_SYM endOfLine
   identifier
   (
    endOfLine
    COMMA_SYM endOfLine
    identifier
   )*
  )?

usingStatement ::=
 USING_KEYWORD endOfLine
  identifier? (endOfLine COMMA_SYM endOfLine identifier)*

if ::=
 IF_KEYWORD statements
  elseIfClause*
  elseClause?
 END_KEYWORD

elseIfClause ::= ELSEIF_KEYWORD statements
elseClause ::= ELSE_KEYWORD statements

for ::= indexer statements END_KEYWORD
private indexer ::= FOR_KEYWORD endOfLine (multiIndexer | singleIndexer)
singleIndexer ::= symbol (IN_KEYWORD | EQ_SYM) endOfLine expr
multiIndexer ::=
 LEFT_BRACKET endOfLine
  symbol (endOfLine COMMA_SYM endOfLine symbol)+ endOfLine
 RIGHT_BRACKET
 (IN_KEYWORD | EQ_SYM) endOfLine
 expr

while ::=
 WHILE_KEYWORD endOfLine
  expr endOfLine
   statements
 END_KEYWORD

returnStatement ::= RETURN_KEYWORD expr?
tryCatchStatement ::=
 TRY_KEYWORD endOfLine
  statements
 catchClause?
 finallyClause?
 END_KEYWORD

catchClause ::=
 CATCH_KEYWORD symbol? endOfLine
 statements

finallyClause ::=
 FINALLY_KEYWORD statements

moduleType ::= BAREMODULE_KEYWORD | MODULE_KEYWORD
moduleName ::= identifierImpl
moduleDeclaration ::=
 moduleType moduleName endOfLine
  statements
 END_KEYWORD

union ::= UNION_KEYWORD tuple
tuple ::=
 LEFT_BRACKET endOfLine
  expr (endOfLine COMMA_SYM endOfLine expr)+ endOfLine COMMA_SYM? endOfLine
 RIGHT_BRACKET

private variables ::=
 LEFT_BRACKET endOfLine
  (typedVariable (endOfLine COMMA_SYM endOfLine typedVariable)*)? endOfLine
 RIGHT_BRACKET

functionName ::= SYM
function ::=
 FUNCTION_KEYWORD endOfLine
    functionName endOfLine
     (typeParameters endOfLine)?
   variables typeAnnotation? endOfLine
  statements
 END_KEYWORD

compactFunction ::=
 functionName endOfLine
  (typeParameters endOfLine)?
   variables EQ_SYM endOfLine
 statement

typeName ::= identifierImpl
abstractTypeName ::= identifierImpl
typeDeclaration ::=
 typeModifiers TYPE_KEYWORD endOfLine
  typeName endOfLine (SUBTYPE_SYM endOfLine identifier)? endOfLine
  (
   ( assignment
   | function
   | compactFunction
   | identifier
   )
   endOfLine
  )*
 END_KEYWORD

abstractTypeDeclaration ::=
 ABSTRACT_KEYWORD TYPE_KEYWORD endOfLine
  abstractTypeName endOfLine (SUBTYPE_SYM endOfLine identifier)? endOfLine
 END_KEYWORD

macro ::= 'TODO'

block ::=
 BLOCK_KEYWORD
  statements
 END_KEYWORD

assignment ::=
 typedVariable endOfLine
 (
  EQ_SYM endOfLine
  expr
 )?

typeAnnotation ::= DOUBLE_COLON endOfLine identifier
typedVariable ::=
 identifier endOfLine
  (typeAnnotation endOfLine)?
 typeParameters?

typeParameters ::=
 LEFT_B_BRACKET endOfLine
  expr (endOfLine COMMA_SYM endOfLine expr?)* endOfLine
 RIGHT_B_BRACKET

userType ::= identifier typeParameters?
typeModifiers ::= IMMUTABLE_KEYWORD?
typeAlias ::= TYPEALIAS_KEYWORD typeName typeParameters? userType

expr ::=
   primaryExpr
 | level3
 | level4
 | level5
 | level6
 | pipeOp
 | level8
 | level9
 | level10
 | level11
 | level12
 | exponentOp
 | level14
 | level15

private level3 ::=
   orOp
 | bitwiseOrOp

private orOp ::= level4 OR_SYM expr
private bitwiseOrOp ::= level4 BITWISE_OR_SYM expr

private level4 ::= andOp
private andOp ::= level5 AND_SYM expr

private level5 ::= lambdaAbstraction
private lambdaAbstraction ::= symbol LAMBDA_ABSTRACTION expr { rightAssociative=true }

private level6 ::=
   lessThanOrEqualOp
 | lessThanOp
 | greaterThanOp
 | greaterThanOrEqualOp
 | isntOp
 | isOp
 | equalsOp
 | unequalOp
 // | subtype

private lessThanOp ::= pipeOp LESS_THAN_SYM expr
private lessThanOrEqualOp ::= pipeOp LESS_THAN_OR_EQUAL_SYM expr
private greaterThanOp ::= pipeOp GREATER_THAN_SYM expr
private greaterThanOrEqualOp ::= pipeOp GREATER_THAN_OR_EQUAL_SYM expr
private equalsOp ::= pipeOp EQUALS_SYM expr
private unequalOp ::= pipeOp UNEQUAL_SYM expr
private isOp ::= pipeOp IS_SYM expr
private isntOp ::= pipeOp ISNT_SYM expr

// |>
// level 7
private pipeOp ::= level8 PIPE_SYM expr

private level8 ::=
   spliceOp
 | quoteOp
 | compoundQuoteOp

private spliceOp ::= level9 SLICE_SYM
// TODO review if this should be a quoted expression!!! with interpolation
private quoteOp ::= COLON_SYM expr
private compoundQuoteOp ::= QUOTE_KEYWORD expr+ END_KEYWORD

// + - ⊕ ⊖ ⊞ ⊟ .+ .- | ∪ ∨ $ ⊔
private level9 ::=
   plusOp
 | minusOp
 | bitwiseXorOp

private bitwiseXorOp ::= level10 INTERPOLATE_SYM expr
private plusOp ::= level10 PLUS_SYM expr
private minusOp ::= level10 MINUS_SYM expr

private level10 ::=
   shlOp
 | shrOp
 | ushrOp

private shrOp ::= level11 SHR_SYM expr
private ushrOp ::= level11 USHR_SYM expr
private shlOp ::= level11 SHL_SYM expr

// * / % & ^
private level11 ::=
   multiplyOp
 | divideOp
 | remainderOp
 | bitwiseAndOp
 | inverseDivideOp
 | factoriseOp

private multiplyOp ::= level12 MULTIPLY_SYM expr
private divideOp ::= level12 DIVIDE_SYM expr
private remainderOp ::= level12 REMAINDER_SYM expr
private inverseDivideOp ::= level12 INVERSE_DIV_SYM expr
private factoriseOp ::= level12 FACTORISE_SYM expr
private bitwiseAndOp ::= level12 BITWISE_AND_SYM expr

// // .//
private level12 ::= fractionOp
private fractionOp ::= exponentOp FRACTION_SYM expr

// ^ .^
// level 13
private exponentOp ::= level14 EXPONENT_SYM expr

// ::
private level14 ::=
   typeOp
 | unaryTypeOp

private typeOp ::= level15 DOUBLE_COLON expr
private unaryTypeOp ::= DOUBLE_COLON expr

// TODO unfinished
private level15 ::=
   unaryPlusOp
 | unaryMinusOp
 | notOp
 | interpolateOp

private unaryMinusOp ::= MINUS_SYM expr
private notOp ::= NOT_SYM expr
private unaryPlusOp ::= PLUS_SYM expr
private interpolateOp ::= INTERPOLATE_SYM expr

private primaryExpr ::=
   string
 | char
 | integer
 | float
 | boolean
 | macroIdentifier
 | identifier
 | if
 | for
 | regex
 | byteArray
 | while
 | function
 | compactFunction
 | empty
 | union
 | macro
 | block
 | abstractTypeDeclaration
 | typeDeclaration
 | typeAlias

private inverseDivAssignOp ::= expr INVERSE_DIV_ASSIGN_SYM expr


private transposeOp ::= expr TRANSPOSE_SYM
private rangeOp ::= expr COLON_SYM expr
private remainderAssignOp ::= expr REMAINDER_ASSIGN_SYM expr
private ushrAssignOp ::= expr USHR_ASSIGN_SYM expr
private plusAssignOp ::= expr PLUS_ASSIGN_SYM expr
private minusAssignOp ::= expr MINUS_ASSIGN_SYM expr
private multiplyAssignOp ::= expr MULTIPLY_ASSIGN_SYM expr
private fractionAssignOp ::= expr FRACTION_ASSIGN_SYM expr
private divideAssignOp ::= expr DIVIDE_ASSIGN_SYM expr { rightAssociative=true }
private factoriseAssignOp ::= expr FACTORISE_ASSIGN_SYM expr { rightAssociative=true }
private exponentAssignOp ::= expr EXPONENT_ASSIGN_SYM expr { rightAssociative=true }
private bitWiseNotOp ::= BITWISE_NOT_SYM expr
private bitwiseAndAssignOp ::= expr BITWISE_AND_ASSIGN_SYM expr { rightAssociative=true }
private bitwiseOrAssignOp ::= expr BITWISE_OR_ASSIGN_SYM expr { rightAssociative=true }
private bitwiseXorAssignOp ::= expr BITWISE_XOR_ASSIGN_SYM expr { rightAssociative=true }
private arrayConstructorOp ::= expr LEFT_M_BRACKET RIGHT_M_BRACKET
private assignOp ::= expr EQ_SYM expr { rightAssociative=true }
private shlAssignOp ::= expr SHL_ASSIGN_SYM expr { rightAssociative=true }
private shrAssignOp ::= expr SHR_ASSIGN_SYM expr { rightAssociative=true }

empty ::= LEFT_M_BRACKET RIGHT_M_BRACKET
