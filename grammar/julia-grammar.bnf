{
  parserClass='org.ice1000.julia.lang.JuliaParser'
  extends='com.intellij.extapi.psi.ASTWrapperPsiElement'
  psiClassPrefix='Julia'
  psiImplClassSuffix='Impl'
  psiPackage='org.ice1000.julia.lang.psi'
  psiImplPackage='org.ice1000.julia.lang.psi.impl'

  tokenTypeClass='org.ice1000.julia.lang.JuliaTokenType'
  elementTypeHolderClass='org.ice1000.julia.lang.psi.JuliaTypes'
  elementTypeClass='org.ice1000.julia.lang.JuliaElementType'
  psiImplUtilClass='org.ice1000.julia.lang.psi.impl.JuliaPsiImplUtils'
}

juliaFile ::= endOfLine statements

macroIdentifier ::= AT_SYM identifier
symbol ::= SYM
identifier ::= identifierImpl
private identifierChain ::= endOfLine DOT_SYM endOfLine symbol
private identifierImpl ::= (symbol identifierChain*) | (symbol? identifierChain+)

private comment ::= BLOCK_COMMENT | LINE_COMMENT
string ::= STR | RAW_STR
integer ::= INT_LITERAL
float ::= FLOAT_LITERAL
boolean ::= TRUE_KEYWORD | FALSE_KEYWORD
char ::= CHAR_LITERAL
regex ::= REGEX_LITERAL

private endOfLineImpl ::= EOL | comment
private endOfLine ::= endOfLineImpl*
private semi ::= endOfLineImpl | SEMICOLON_SYM
statements ::= semi* (statement (semi+ statement)*)? semi*

private statement ::=
   includeStatement
 | moduleDeclaration
 | exportStatement
 | importStatement
 | usingStatement
 | tryCatchStatement
 | returnStatement
 | breakStatement
 | continueStatement
 | expr

breakStatement ::= BREAK_KEYWORD
continueStatement ::= CONTINUE_KEYWORD
includeStatement ::=
 INCLUDE_KEYWORD endOfLine
  LEFT_BRACKET endOfLine
   string endOfLine
  RIGHT_BRACKET

exportStatement ::=
 EXPORT_KEYWORD endOfLine
  (identifier | macroIdentifier)
  (endOfLine COMMA_SYM endOfLine
   (identifier | macroIdentifier))*

importStatement ::=
 IMPORT_KEYWORD endOfLine
  identifier endOfLine
  (COLON_SYM endOfLine
   identifier
   (
    endOfLine
    COMMA_SYM endOfLine
    identifier
   )*
  )?

usingStatement ::=
 USING_KEYWORD endOfLine
  identifier? (endOfLine COMMA_SYM endOfLine identifier)*

if ::=
 IF_KEYWORD statements
  elseIfClause*
  elseClause?
 END_KEYWORD

elseIfClause ::= ELSEIF_KEYWORD statements
elseClause ::= ELSE_KEYWORD statements

for ::= indexer statements END_KEYWORD
private indexer ::= FOR_KEYWORD endOfLine (multiIndexer | singleIndexer)
singleIndexer ::= symbol (IN_KEYWORD | EQ_SYM) endOfLine expr
multiIndexer ::=
 LEFT_BRACKET endOfLine
  symbol (endOfLine COMMA_SYM endOfLine symbol)+ endOfLine
 RIGHT_BRACKET
 (IN_KEYWORD | EQ_SYM) endOfLine
 expr

while ::=
 WHILE_KEYWORD endOfLine
  expr endOfLine
   statements
 END_KEYWORD

returnStatement ::= RETURN_KEYWORD expr?
tryCatchStatement ::=
 TRY_KEYWORD endOfLine
  statements
 catchClause?
 finallyClause?
 END_KEYWORD

catchClause ::=
 CATCH_KEYWORD symbol? endOfLine
 statements

finallyClause ::=
 FINALLY_KEYWORD statements

moduleType ::= BAREMODULE_KEYWORD | MODULE_KEYWORD
moduleName ::= identifierImpl
moduleDeclaration ::=
 moduleType moduleName endOfLine
  statements
 END_KEYWORD

union ::= UNION_KEYWORD tuple
tuple ::=
 LEFT_BRACKET endOfLine
  expr (endOfLine COMMA_SYM endOfLine expr)+ endOfLine COMMA_SYM? endOfLine
 RIGHT_BRACKET

private variables ::=
 LEFT_BRACKET endOfLine
  (typedVariable (endOfLine COMMA_SYM endOfLine typedVariable)*)? endOfLine
 RIGHT_BRACKET

functionName ::= SYM
function ::=
 FUNCTION_KEYWORD endOfLine
    functionName endOfLine
     (typeParameters endOfLine)?
   variables typeAnnotation? endOfLine
  statements
 END_KEYWORD

compactFunction ::=
 functionName endOfLine
  (typeParameters endOfLine)?
   variables EQ_SYM endOfLine
 statement

typeName ::= identifierImpl
abstractTypeName ::= identifierImpl
typeDeclaration ::=
 typeModifiers TYPE_KEYWORD endOfLine
  typeName endOfLine (SUBTYPE_SYM endOfLine identifier)? endOfLine
  (
   ( assignment
   | function
   | compactFunction
   | identifier
   )
   endOfLine
  )*
 END_KEYWORD

abstractTypeDeclaration ::=
 ABSTRACT_KEYWORD TYPE_KEYWORD endOfLine
  abstractTypeName endOfLine (SUBTYPE_SYM endOfLine identifier)? endOfLine
 END_KEYWORD

macro ::= 'TODO'

block ::=
 BLOCK_KEYWORD
  statements
 END_KEYWORD

assignment ::=
 typedVariable endOfLine
 (
  EQ_SYM endOfLine
  expr
 )?

typeAnnotation ::= DOUBLE_COLON endOfLine identifier
typedVariable ::=
 identifier endOfLine
  (typeAnnotation endOfLine)?
 typeParameters?

typeParameters ::=
 LEFT_B_BRACKET endOfLine
  expr (endOfLine COMMA_SYM endOfLine expr?)* endOfLine
 RIGHT_B_BRACKET

userType ::= identifier typeParameters?
typeModifiers ::= IMMUTABLE_KEYWORD?
typeAlias ::= TYPEALIAS_KEYWORD typeName typeParameters? userType

expr ::=
   level17

private level17 ::=
   string
 | char
 | integer
 | float
 | boolean
 | macroIdentifier
 | identifier
 | if
 | for
 | regex
 | while
 | function
 | compactFunction
 | empty
 | union
 | macro
 | block
 | abstractTypeDeclaration
 | typeDeclaration
 | typeAlias

interpolateOp ::= INTERPOLATE_SYM expr
inverseDivAssignOp ::= expr INVERSE_DIV_ASSIGN_SYM expr
inverseDivideOp ::= expr INVERSE_DIV_SYM expr
isOp ::= expr IS_SYM expr
isntOp ::= expr ISNT_SYM expr
lambdaAbstraction ::= symbol LAMBDA_ABSTRACTION expr {
	rightAssociative=true
}

lessThanOp ::= expr LESS_THAN_SYM expr
lessThanOrEqualOp ::= expr LESS_THAN_OR_EQUAL_SYM expr
shrAssignOp ::= expr SHR_ASSIGN_SYM expr
shrOp ::= expr SHR_SYM expr
minusOp ::= expr MINUS_SYM expr
minusAssignOp ::= expr MINUS_ASSIGN_SYM expr
multiplyOp ::= expr MULTIPLY_SYM expr
multiplyAssignOp ::= expr MULTIPLY_ASSIGN_SYM expr
unequalOp ::= expr UNEQUAL_SYM expr
fractionAssignOp ::= expr FRACTION_ASSIGN_SYM expr
fractionOp ::= expr FRACTION_SYM expr
greaterThanOp ::= expr GREATER_THAN_SYM expr
greaterThanOrEqualOp ::= expr GREATER_THAN_OR_EQUAL_SYM expr
divideAssignOp ::= expr DIVIDE_ASSIGN_SYM expr { rightAssociative=true }
divideOp ::= expr DIVIDE_SYM expr
elementAddAssignOp ::= expr ELEMENT_ADD_ASSIGN_SYM expr { rightAssociative=true }
elementShlOp ::= expr ELEMENT_SHL_SYM expr
elementShrOp ::= expr ELEMENT_SHR_SYM expr
elementLshrOp ::= expr ELEMENT_LSHR_SYM expr
elementFractionOp ::= expr ELEMENT_FRACTION_SYM expr
elementDivideOp ::= expr ELEMENT_DIVIDE_SYM expr
elementDivAssignOp ::= expr ELEMENT_DIV_ASSIGN_SYM expr { rightAssociative=true }
elementExponentAssignOp ::= expr ELEMENT_EXPONENT_ASSIGN_SYM expr { rightAssociative=true }
elementFractionAssignOp ::= expr ELEMENT_FRACTION_ASSIGN_SYM expr { rightAssociative=true }
elementMultiplyAssignOp ::= expr ELEMENT_MULTIPLY_ASSIGN_SYM expr { rightAssociative=true }
elementRemainderAssignOp ::= expr ELEMENT_REMAINDER_ASSIGN_SYM expr { rightAssociative=true }
elementRemainderOp ::= expr ELEMENT_REMAINDER_SYM expr
elementExponentOp ::= expr ELEMENT_EXPONENT_SYM expr
elementMinusAssignOp ::= expr ELEMENT_MINUS_ASSIGN_SYM expr { rightAssociative=true }
elementMinusOp ::= expr ELEMENT_MINUS_SYM expr
elementMultiplyOp ::= expr ELEMENT_MULTIPLY_SYM expr
elementPlusOp ::= expr ELEMENT_PLUS_SYM expr
elementEqualsOp ::= expr ELEMENT_EQUALS_SYM expr
elementUnequalOp ::= expr ELEMENT_UNEQUAL_SYM expr
elementGreaterThanOp ::= expr ELEMENT_GREATER_THAN_SYM expr
elementLessThanOp ::= expr ELEMENT_LESS_THAN_SYM expr
elementGreaterThanOrEqualOp ::= expr ELEMENT_GREATER_THAN_OR_EQUAL_SYM expr
elementLessThanOrEqualOp ::= expr ELEMENT_LESS_THAN_OR_EQUAL_SYM expr
factoriseAssignOp ::= expr FACTORISE_ASSIGN_SYM expr { rightAssociative=true }
factoriseOp ::= expr FACTORISE_SYM expr
exponentAssignOp ::= expr EXPONENT_ASSIGN_SYM expr { rightAssociative=true }
exponentOp ::= expr EXPONENT_SYM expr
equalsOp ::= expr EQUALS_SYM expr

empty ::= '[' ']'
