{
  parserClass='org.ice1000.julia.lang.JuliaParser'
  extends='com.intellij.extapi.psi.ASTWrapperPsiElement'
  psiClassPrefix='Julia'
  psiImplClassSuffix='Impl'
  psiPackage='org.ice1000.julia.lang.psi'
  psiImplPackage='org.ice1000.julia.lang.psi.impl'

  tokenTypeClass='org.ice1000.julia.lang.JuliaTokenType'
  elementTypeHolderClass='org.ice1000.julia.lang.psi.JuliaTypes'
  elementTypeClass='org.ice1000.julia.lang.JuliaElementType'
  psiImplUtilClass='org.ice1000.julia.lang.psi.impl.JuliaPsiImplUtils'
}

juliaFile ::= statements

macroIdentifier ::= AT_SYM identifier
symbol ::= SYM
identifier ::=
   symbol  (endOfLine DOT_SYM endOfLine symbol)*
 | symbol? (endOfLine DOT_SYM endOfLine symbol)+

//noinspection BnfUnusedRule
comment ::= LINE_COMMENT | BLOCK_COMMENT
string ::= STR | RAW_STR
integer ::= INT_LITERAL
float ::= FLOAT_LITERAL
boolean ::= TRUE_KEYWORD | FALSE_KEYWORD
// char ::= CHAR_LITERAL

private endOfLine ::= EOL*
private semi ::= EOL | SEMICOLON_SYM
statements ::= semi* (statement (semi+ statement)*)? semi*
private statement ::=
   includeStatement
 | moduleDeclaration
 | exportStatement
 | importStatement
 | usingStatement
 | ifStatement
 | forStatement
 | whileStatement
 | tryCatchStatement
 | returnStatement
 | breakStatement
 | continueStatement
 | functionDeclaration
 | typeDeclaration // which is `classDeclaration` in other languages
 | compactFunction
 | expr

breakStatement ::= BREAK_KEYWORD
continueStatement ::= CONTINUE_KEYWORD
includeStatement ::=
 INCLUDE_KEYWORD endOfLine
  LEFT_BRACKET endOfLine
   string endOfLine
  RIGHT_BRACKET

exportStatement ::=
 EXPORT_KEYWORD endOfLine
  (identifier | macroIdentifier)
  (endOfLine COMMA_SYM endOfLine
   (identifier | macroIdentifier))*

importStatement ::=
 IMPORT_KEYWORD endOfLine
  identifier endOfLine
  (COLON_SYM endOfLine
   identifier
   (
    endOfLine
    COMMA_SYM endOfLine
    identifier
   )*
  )?

usingStatement ::=
 USING_KEYWORD endOfLine
  identifier? (endOfLine COMMA_SYM endOfLine identifier)*

ifStatement ::=
 IF_KEYWORD statements
  elseIfClause*
  elseClause?
 END_KEYWORD

elseIfClause ::= ELSEIF_KEYWORD statements
elseClause ::= ELSE_KEYWORD statements

forStatement ::= indexer statements END_KEYWORD
private indexer ::= FOR_KEYWORD endOfLine (multiIndexer | singleIndexer)
singleIndexer ::= symbol (IN_KEYWORD | EQ_SYM) endOfLine expr
multiIndexer ::=
 LEFT_BRACKET endOfLine
  symbol (endOfLine COMMA_SYM endOfLine symbol)+ endOfLine
 RIGHT_BRACKET
 (IN_KEYWORD | EQ_SYM) endOfLine
 expr

whileStatement ::= WHILE_KEYWORD expr statements END_KEYWORD
returnStatement ::= RETURN_KEYWORD expr?
tryCatchStatement ::= TRY_KEYWORD statements catchClause? finallyClause? END_KEYWORD
catchClause ::= CATCH_KEYWORD symbol? statements
finallyClause ::= FINALLY_KEYWORD statements

moduleDeclaration ::= moduleType identifier statements END_KEYWORD
moduleType ::= BAREMODULE_KEYWORD | MODULE_KEYWORD

private variables ::= LEFT_BRACKET (typedVariable (COMMA_SYM typedVariable)*)? RIGHT_BRACKET
functionDeclaration ::=
 FUNCTION_KEYWORD identifier typeParameters?
   variables type?
  statements
 END_KEYWORD

compactFunction ::= identifier typeParameters? variables EQ_SYM statements

typeDeclaration ::=
 typeAndAbsTypeKeywords typeName (SUBTYPE_SYM typeName)?
 (classTypedVariable*)?
 (functionDeclaration*)?
 END_KEYWORD

 
expr ::=
   string
 | integer
 | float
 | boolean
 | identifier

// | char
type ::= DOUBLE_COLON endOfLine identifier
typedVariable ::= identifier type? typeParameters?
typeParameters ::= LEFT_B_BRACKET expr (COMMA_SYM expr?)* RIGHT_B_BRACKET

// class keywords->  `abstract type` and `type`.
// `abstract classname` is deprecated
// and you should use `abstract classname
// end`
typeAndAbsTypeKeywords::= (ABSTRACT_KEYWORD)? TYPE_KEYWORD
classTypedVariable::= classTypeFields (DOUBLE_COLON typeName)? (EQ_SYM expr)?
classTypeFields ::= symbol
typeName ::= symbol
