{
  parserClass='org.ice1000.julia.lang.JuliaParser'
  extends='com.intellij.extapi.psi.ASTWrapperPsiElement'
  psiClassPrefix='Julia'
  psiImplClassSuffix='Impl'
  psiPackage='org.ice1000.julia.lang.psi'
  psiImplPackage='org.ice1000.julia.lang.psi.impl'

  tokenTypeClass='org.ice1000.julia.lang.JuliaTokenType'
  elementTypeHolderClass='org.ice1000.julia.lang.psi.JuliaTypes'
  elementTypeClass='org.ice1000.julia.lang.JuliaElementType'
  psiImplUtilClass='org.ice1000.julia.lang.psi.impl.JuliaPsiImplUtils'
}

juliaFile ::= module | statements

module ::= moduleType identifier statements END_KEYWORD
moduleType ::= BAREMODULE_KEYWORD | MODULE_KEYWORD

macroIdentifier ::= AT_SYM identifier
identifier ::= symbol (DOT_SYM symbol)* | symbol? (DOT_SYM symbol)+
symbol ::= SYM

//noinspection BnfUnusedRule
comment ::= LINE_COMMENT
string ::= STR | RAW_STR
integer ::= INT_LITERAL
float ::= FLOAT_LITERAL
boolean ::= TRUE_KEYWORD | FALSE_KEYWORD

private semi ::= EOL | SEMICOLON_SYM
statements ::= semi* (statement (semi+ statement)*)? semi*
private statement ::=
   includeStatement
 | exportStatement
 | importStatement
 | usingStatement
 | ifStatement
 | forStatement
 | whileStatement
 | tryCatchStatement
 | returnStatement
 | breakStatement
 | continueStatement
 | functionDeclaration
 | compactFunction
 | expr

breakStatement ::= BREAK_KEYWORD
continueStatement ::= CONTINUE_KEYWORD
includeStatement ::= INCLUDE_KEYWORD LEFT_BRACKET string RIGHT_BRACKET
exportStatement ::= EXPORT_KEYWORD (identifier | macroIdentifier) (COMMA_SYM (identifier | macroIdentifier))*
importStatement ::= IMPORT_KEYWORD identifier (COLON_SYM identifier (COMMA_SYM identifier)*)?
usingStatement ::= USING_KEYWORD identifier? (COMMA_SYM identifier)*
ifStatement ::= IF_KEYWORD statements (elseIfClause* elseClause?)? END_KEYWORD
elseIfClause ::= ELSEIF_KEYWORD statements
elseClause ::= ELSE_KEYWORD statements

forStatement ::= indexer statements END_KEYWORD
indexer ::= FOR_KEYWORD (multiIndexer | singleIndexer)
singleIndexer ::= symbol (IN_KEYWORD | EQ_SYM) expr
multiIndexer ::= LEFT_BRACKET symbol (COMMA_SYM symbol)+ RIGHT_BRACKET (IN_KEYWORD | EQ_SYM) expr

whileStatement ::= WHILE_KEYWORD expr statements END_KEYWORD
returnStatement ::= RETURN_KEYWORD expr?
tryCatchStatement ::= TRY_KEYWORD statements catchClause? finallyClause? END_KEYWORD
catchClause ::= CATCH_KEYWORD symbol? statements
finallyClause ::= FINALLY_KEYWORD statements

private variables ::= LEFT_BRACKET (typedVariable (COMMA_SYM typedVariable)*)? RIGHT_BRACKET
functionDeclaration ::=
 FUNCTION_KEYWORD identifier typeParameters?
   variables type?
  statements
 END_KEYWORD

compactFunction ::= identifier typeParameters? variables EQ_SYM statements

expr ::=
   string
 | integer
 | float
 | boolean
 | identifier

type ::= DOUBLE_COLON identifier
typedVariable ::= identifier type? typeParameters?
typeParameters ::= LEFT_B_BRACKET expr (COMMA_SYM expr?)* RIGHT_B_BRACKET
