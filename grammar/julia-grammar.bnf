{
  // ref: https://github.com/JuliaLang/julia/blob/master/src/julia-parser.scm
  parserClass='org.ice1000.julia.lang.JuliaParser'
  extends='com.intellij.extapi.psi.ASTWrapperPsiElement'
  psiClassPrefix='Julia'
  psiImplClassSuffix='Impl'
  psiPackage='org.ice1000.julia.lang.psi'
  psiImplPackage='org.ice1000.julia.lang.psi.impl'

  extends('.*Op|.*Expr|.*Lit|.*ymbol|.*lock')=expr

  tokenTypeClass='org.ice1000.julia.lang.JuliaTokenType'
  elementTypeHolderClass='org.ice1000.julia.lang.psi.JuliaTypes'
  elementTypeClass='org.ice1000.julia.lang.JuliaElementType'
  psiImplUtilClass='org.ice1000.julia.lang.psi.impl.JuliaPsiImplUtils'
}

juliaFile ::= endOfLine statements

symbol ::= SYM {
	implements=['org.ice1000.julia.lang.psi.impl.IJuliaSymbol']
	mixin='org.ice1000.julia.lang.psi.impl.JuliaSymbolMixin'
}

macroSymbol ::= AT_SYM SYM

unaryOpAsSymbol ::=
   MINUS_SYM
 | DOT_SYM
 | PLUS_SYM
 | NOT_SYM
 | INTERPOLATE_SYM

opAsSymbol ::=
   SEMICOLON_SYM
 | COMMA_SYM
 | QUESTION_SYM
 | SUBTYPE_SYM
 | INVERSE_DIV_SYM
 | IS_SYM
 | ISNT_SYM
 | EQ_SYM
 | LAMBDA_ABSTRACTION
 | ARROW_SYM
 | SLICE_SYM
 | LESS_THAN_SYM
 | LESS_THAN_OR_EQUAL_SYM
 | AND_SYM
 | OR_SYM
 | PIPE_SYM
 | INVRESE_PIPE_SYM
 | SHL_SYM
 | SHR_SYM
 | USHR_SYM
 | FRACTION_SYM
 | DIVIDE_SYM
 | REMAINDER_SYM
 | EXPONENT_SYM
 | MULTIPLY_SYM
 | EQUALS_SYM
 | UNEQUAL_SYM
 | GREATER_THAN_SYM
 | GREATER_THAN_OR_EQUAL_SYM
 | TRANSPOSE_SYM
 | IN_SYM
 | MISC_COMPARISON_SYM
 | MISC_PLUS_SYM
 | MISC_MULTIPLY_SYM
 | MISC_EXPONENT_SYM
 | FACTORISE_SYM
 | BITWISE_AND_SYM
 | BITWISE_OR_SYM
 | BITWISE_XOR_SYM
 | SPECIAL_ARROW_SYM
 | MISC_ARROW_SYM
 | BITWISE_NOT_SYM
 | ASSIGN_SYM

private comment ::= blockComment | LINE_COMMENT
private blockComment ::= BLOCK_COMMENT_START (BLOCK_COMMENT_BODY | blockComment)* BLOCK_COMMENT_END

private cmd ::= CMD_QUOTE_START stringTemplateElement* CMD_QUOTE_END
private str ::= QUOTE_START stringTemplateElement* QUOTE_END
private rawStr ::= TRIPLE_QUOTE_START stringTemplateElement* TRIPLE_QUOTE_END
string ::= cmd | str | rawStr { extends=expr }

private stringTemplateElement::=
   STRING_UNICODE
 | STRING_ESCAPE
 | template
 | stringContent

template ::= SHORT_INTERPOLATE_SYM symbol | STRING_INTERPOLATE_START expr STRING_INTERPOLATE_END
stringContent ::= REGULAR_STRING_PART_LITERAL {
	implements=['org.ice1000.julia.lang.psi.impl.IJuliaStringContent']
	mixin='org.ice1000.julia.lang.psi.impl.JuliaStringContentMixin'
}

integer ::= INT_LITERAL { extends=expr }
floatLit ::= FLOAT_LITERAL | FLOAT_CONSTANT
booleanLit ::= TRUE_KEYWORD | FALSE_KEYWORD
charLit ::= CHAR_LITERAL

private endOfLineImpl ::= EOL | comment
private endOfLine ::= endOfLineImpl*
private semi ::= endOfLineImpl | SEMICOLON_SYM
statements ::= semi* (statement (semi+ statement)*)? semi*

private statement ::=
   moduleDeclaration
 | globalStatement
 | expr (COMMA_SYM expr)*

moduleDeclaration ::=
 (BAREMODULE_KEYWORD | MODULE_KEYWORD) symbol endOfLine
  statements
 END_KEYWORD

globalStatement ::=
 GLOBAL_KEYWORD endOfLine
 expr (COMMA_SYM endOfLine expr)*

typeAnnotation ::= DOUBLE_COLON endOfLine primaryExpr typeParameters?

typedNamedVariable ::=
 symbol? typeAnnotation? (EQ_SYM expr)? { pin=3 }

private typeParameters ::=
 LEFT_B_BRACKET endOfLine
  expr (commaSep expr?)* endOfLine
 RIGHT_B_BRACKET

userType ::= expr typeParameters?
typeAlias ::= TYPEALIAS_KEYWORD symbol typeParameters? userType { extends=expr }

expressionList ::= expr (COMMA_SYM endOfLine expr)* COMMA_SYM?

// lowest
applyMacroOp ::= macroSymbol expr*

// naming: level+number or type+level or type+levelOp
expr ::=
   compactFunction
 | applyMacroOp
 | assignLevelOp
 | arrowOp
 | ternaryOp
 | lambda
 | miscArrowsOp
 | orOp
 | andOp
 | comparisonLevelOp
 | pipeLevelOp
 | quoteLevel
 | plusLevelOp
 | bitwiseLevel
 | multiplyLevel
 | fractionOp
 | exponentLevel
 | typeOp
 | unaryLevel
 | suffixedExpr
 | primaryExpr {
	implements=['org.ice1000.julia.lang.psi.impl.IJuliaExpr']
	mixin='org.ice1000.julia.lang.psi.impl.JuliaExprMixin'
}

memberAccessOp ::= expr DOT_SYM (symbol | macroSymbol)
accessAllOp ::= DOT_SYM (symbol | macroSymbol) { pin=1 }
private access ::= accessAllOp | memberAccessOp

compactFunction ::=
 symbol
  (typeParameters endOfLine)?
   functionSignature endOfLine
    (whereClause endOfLine)?
 EQ_SYM endOfLine expr {
	pin=6
	extends=expr
	implements=['org.ice1000.julia.lang.psi.impl.IJuliaFunctionDeclaration']
}

// level 0
assignLevelOp ::= expr assignLevelOperator endOfLine expr { rightAssociative=true pin=2 }
assignLevelOperator ::=
   COLON_ASSIGN_SYM
 | BITWISE_AND_ASSIGN_SYM
 | BITWISE_OR_ASSIGN_SYM
 | BITWISE_XOR_ASSIGN_SYM
 | INVERSE_DIV_ASSIGN_SYM
 | SHL_ASSIGN_SYM
 | SHR_ASSIGN_SYM
 | REMAINDER_ASSIGN_SYM
 | USHR_ASSIGN_SYM
 | PLUS_ASSIGN_SYM
 | MINUS_ASSIGN_SYM
 | MULTIPLY_ASSIGN_SYM
 | FRACTION_ASSIGN_SYM
 | DIVIDE_ASSIGN_SYM
 | FACTORISE_ASSIGN_SYM
 | EXPONENT_ASSIGN_SYM
 | EQ_SYM
 | ASSIGN_SYM

// level 1.5
arrowOp ::= expr ARROW_SYM endOfLine expr { rightAssociative=true }

// ? :
// level 2
ternaryOp ::= expr QUESTION_SYM endOfLine rangeOp { pin=2 }

// level 16
private suffixedExpr ::=
   applyIndexOp
 | applyFunctionOp
 | memberAccessOp
 | applyWhereOp
 | type

type ::= expr typeParameters { extends=expr }

applyIndexOp ::= expr LEFT_M_BRACKET endOfLine expressionList? endOfLine RIGHT_M_BRACKET

applyWhereOp ::= expr whereClause

applyFunctionOp ::=
 expr DOT_SYM? LEFT_BRACKET endOfLine
  (expressionList endOfLine)?
  (SEMICOLON_SYM endOfLine
    (
     commaSep expr endOfLine
     EQ_SYM endOfLine expr
    )*
    endOfLine
  )?
 RIGHT_BRACKET doBlock?

symbolLhs ::=
 ((LOCAL_KEYWORD | CONST_KEYWORD)
  endOfLine)?
 (symbol | LEFT_BRACKET symbol RIGHT_BRACKET)
  (COMMA_SYM endOfLine symbol)* { extends=expr }

// All reserved but unassigned
// level 2.5
miscArrowsOp ::= expr (SPECIAL_ARROW_SYM | MISC_ARROW_SYM) endOfLine expr

// ||
// level 3
orOp ::= expr OR_SYM endOfLine expr

// &&
// level 4
andOp ::= expr AND_SYM endOfLine expr

// ->
// level 5
lambda ::=
 (symbol | tuple | LEFT_BRACKET RIGHT_BRACKET)
  LAMBDA_ABSTRACTION endOfLine expr {
	rightAssociative=true
	extends=expr
}

// level 6
comparisonLevelOp ::= expr comparisonLevelOperator endOfLine expr
comparisonLevelOperator ::=
   LESS_THAN_SYM
 | LESS_THAN_OR_EQUAL_SYM
 | GREATER_THAN_SYM
 | GREATER_THAN_OR_EQUAL_SYM
 | EQUALS_SYM
 | UNEQUAL_SYM
 | IS_SYM
 | ISNT_SYM
 | SUBTYPE_SYM
 | MISC_COMPARISON_SYM

// |>
// level 7
pipeLevelOperator ::= PIPE_SYM | INVERSE_PIPE_SYM
pipeLevelOp ::= expr pipeLevelOperator endOfLine expr

private quoteLevel ::=
   spliceOp
 | quoteOp
 | compoundQuoteOp

spliceOp ::= expr SLICE_SYM
compoundQuoteOp ::= QUOTE_KEYWORD endOfLine (expr endOfLine)* END_KEYWORD
quoteOp ::= COLON_SYM endOfLine quotable
private quotable ::=
   unaryOpAsSymbol
 | opAsSymbol
 | QUOTE_KEYWORD
 | expr

// + - etc
plusLevelOp ::= expr plusLevelOperator endOfLine expr
plusLevelOperator ::=
   INTERPOLATE_SYM
 | BITWISE_XOR_SYM
 | BITWISE_OR_SYM
 | PLUS_SYM
 | MINUS_SYM
 | MISC_PLUS_SYM

private bitwiseLevel ::=
   bitwiseLevelOp
 | rangeOp
 | transposeOp

bitwiseLevelOp ::= expr bitwiseLevelOperator endOfLine expr
rangeOp ::= expr COLON_SYM endOfLine expr
bitwiseLevelOperator ::=
   SHR_SYM
 | USHR_SYM
 | SHL_SYM

transposeOp ::= expr TRANSPOSE_SYM

// * / % & ^
private multiplyLevel ::=
   multiplyLevelOp
 | implicitMultiplyOp

multiplyLevelOp ::= expr multiplyLevelOperator endOfLine expr
multiplyLevelOperator ::=
   MULTIPLY_SYM
 | DIVIDE_SYM
 | REMAINDER_SYM
 | INVERSE_DIV_SYM
 | FACTORISE_SYM
 | BITWISE_AND_SYM
 | MISC_MULTIPLY_SYM

implicitMultiplyOp ::= specialLhs blockComment? IMPLICIT_MULTIPLY_SYM specialRhs
private specialLhs ::= integer | floatLit | symbol | string
private specialRhs ::= symbol | string | charLit | integer | floatLit

// // .//
// level 12
fractionOp ::= expr FRACTION_SYM endOfLine expr

// ^ .^
private exponentLevel ::=
   miscExponentOp
 | exponentOp

exponentOp ::= expr EXPONENT_SYM endOfLine expr
miscExponentOp ::= expr MISC_EXPONENT_SYM endOfLine expr

// ::
// level 13.5
typeOp ::= expr DOUBLE_COLON endOfLine expr

// level 15
private unaryLevel ::=
   unaryPlusOp
 | unaryMinusOp
 | unaryTypeOp
 | unaryInterpolateOp
 | notOp
 | bitWiseNotOp

bitWiseNotOp ::= BITWISE_NOT_SYM endOfLine expr
unaryTypeOp ::= DOUBLE_COLON endOfLine expr
unaryMinusOp ::= MINUS_SYM endOfLine expr
unaryInterpolateOp ::= INTERPOLATE_SYM endOfLine expr
notOp ::= NOT_SYM endOfLine expr
unaryPlusOp ::= PLUS_SYM endOfLine expr

private primaryExpr ::=
   string
 | charLit
 | integer
 | floatLit
 | booleanLit
 | ifExpr
 | forExpr
 | forComprehension
 | whileExpr
 | function
 | returnExpr
 | breakExpr
 | tryCatch
 | continueExpr
 | array
 | union
 | tuple
 | macro
 | let
 | block
 | colonBlock
 | export
 | importExpr
 | importAllExpr
 | using
 | abstractTypeDeclaration
 | primitiveTypeDeclaration
 | typeDeclaration
 | typeAlias
 | symbolLhs
 | macroSymbol
 | bracketedExpr

bracketedExpr ::=
 LEFT_BRACKET endOfLine
  (
    opAsSymbol
  | unaryOpAsSymbol
  | statements
  ) endOfLine (COMMA_SYM endOfLine)?
 RIGHT_BRACKET

whereClause ::= WHERE_KEYWORD afterWhere

private afterWhere ::=
   (symbol | LEFT_B_BRACKET symbol RIGHT_B_BRACKET)
    ((SUBTYPE_SYM | EQ_SYM) endOfLine expr)?
 | LEFT_B_BRACKET
    (afterWhere (commaSep afterWhere)*)?
     COMMA_SYM? endOfLine
   RIGHT_B_BRACKET

array ::=
 LEFT_M_BRACKET endOfLine
  (
   (expr (commaSep? expr)*)
   (SEMICOLON_SYM endOfLine
    expr (commaSep? expr)* COMMA_SYM?)*
  )?
  RIGHT_M_BRACKET { extends=expr }

union ::= UNION_KEYWORD tuple { extends=expr }

tuple ::=
 LEFT_BRACKET endOfLine
  expr (commaSep expr)+ endOfLine COMMA_SYM? endOfLine
 RIGHT_BRACKET { extends=expr }

private commaSep ::= endOfLine COMMA_SYM endOfLine
private functionSignature ::=
 LEFT_BRACKET endOfLine
  (typedNamedVariable (commaSep typedNamedVariable)* commaSep?)?
  (SEMICOLON_SYM endOfLine
   typedNamedVariable (commaSep typedNamedVariable)* commaSep?)?
  SLICE_SYM?
 RIGHT_BRACKET { pin=1 }

private untypedVariables ::=
 LEFT_BRACKET endOfLine
  (symbol (commaSep symbol)*)? endOfLine
 RIGHT_BRACKET

function ::=
 FUNCTION_KEYWORD endOfLine
  symbol
   (typeParameters endOfLine)?
   (functionSignature endOfLine)?
   (whereClause endOfLine)?
  statements
 END_KEYWORD {
	extends=expr
	implements=['org.ice1000.julia.lang.psi.impl.IJuliaFunctionDeclaration']
}

private typeModifiers ::= IMMUTABLE_KEYWORD | MUTABLE_KEYWORD
typeDeclaration ::=
 (typeModifiers? (TYPE_KEYWORD | STRUCT_KEYWORD) | typeModifiers) endOfLine
  symbol typeParameters? (SUBTYPE_SYM endOfLine expr)? endOfLine
  statements
 END_KEYWORD { extends=expr }

abstractTypeDeclaration ::=
 ABSTRACT_KEYWORD TYPE_KEYWORD endOfLine
  symbol (SUBTYPE_SYM endOfLine expr)? endOfLine
 END_KEYWORD { extends=expr }

primitiveTypeDeclaration ::=
 PRIMITIVE_KEYWORD TYPE_KEYWORD endOfLine
  symbol (SUBTYPE_SYM endOfLine expr)? expr endOfLine
 END_KEYWORD { extends=expr }

macro ::=
 MACRO_KEYWORD endOfLine
    symbol endOfLine
   untypedVariables endOfLine
  statements
 END_KEYWORD { extends=expr }

let ::= LET_KEYWORD statements END_KEYWORD { extends=expr }

block ::= BEGIN_KEYWORD statements END_KEYWORD

colonBlock ::= COLON_BEGIN_SYM statements RIGHT_BRACKET

doBlock ::= DO_KEYWORD statements END_KEYWORD

breakExpr ::= BREAK_KEYWORD

continueExpr ::= CONTINUE_KEYWORD

export ::=
 EXPORT_KEYWORD endOfLine
  memberAccessOp
  (commaSep memberAccessOp)* { extends=expr }

importAllExpr ::=
 IMPORTALL_KEYWORD access

importExpr ::=
 IMPORT_KEYWORD endOfLine
  access
  (
    COLON_SYM endOfLine
    memberAccessOp
   (commaSep memberAccessOp)*
  )?

using ::=
 USING_KEYWORD endOfLine
  access? (commaSep access)* { extends=expr }

ifExpr ::=
 IF_KEYWORD
  statements
  elseIfClause*
  elseClause?
 END_KEYWORD

elseIfClause ::= ELSEIF_KEYWORD statements
elseClause ::= ELSE_KEYWORD statements

forComprehension ::=
 LEFT_M_BRACKET endOfLine
  expr endOfLine
  indexer
  (IF_KEYWORD expr)?
 RIGHT_M_BRACKET { extends=expr }

forExpr ::= indexer statements END_KEYWORD
private indexer ::= FOR_KEYWORD endOfLine (multiIndexer | singleIndexer)
private infixIndexer ::= IN_KEYWORD | IN_SYM | EQ_SYM
singleIndexer ::= symbol infixIndexer endOfLine expr
multiIndexer ::=
 LEFT_BRACKET endOfLine
  symbol (commaSep symbol)+ endOfLine
 RIGHT_BRACKET
 infixIndexer endOfLine
 expr

whileExpr ::=
 WHILE_KEYWORD endOfLine
  expr endOfLine
   statements
 END_KEYWORD { extends=expr }

returnExpr ::= RETURN_KEYWORD (expr (COMMA_SYM expr)*)?

tryCatch ::=
 TRY_KEYWORD endOfLine
  statements
 catchClause?
 finallyClause?
 END_KEYWORD { extends=expr }

catchClause ::=
 CATCH_KEYWORD symbol? endOfLine
 statements

finallyClause ::=
 FINALLY_KEYWORD statements
