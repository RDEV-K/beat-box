{
  parserClass='org.ice1000.julia.lang.JuliaParser'
  extends='com.intellij.extapi.psi.ASTWrapperPsiElement'
  psiClassPrefix='Cov'
  psiImplClassSuffix='Impl'
  psiPackage='org.ice1000.julia.lang.psi'
  psiImplPackage='org.ice1000.julia.lang.psi.impl'

  tokenTypeClass='org.ice1000.julia.lang.JuliaTokenType'
  elementTypeHolderClass='org.ice1000.julia.lang.psi.JuliaTypes'
  elementTypeClass='org.ice1000.julia.lang.JuliaElementType'
  psiImplUtilClass='org.ice1000.julia.lang.psi.impl.JuliaPsiImplUtils'
}

juliaFile ::= module | statement*

module ::= MODULE_KEYWORD symbol statement* END_KEYWORD

macroSymbol ::= AT_SYM symbol
symbol ::= SYM (DOT_SYM SYM)* | SYM? (DOT_SYM SYM)+

comment ::= LINE_COMMENT
string ::= STR

statement ::=
   literals
 | includeStatement
 | exportStatement
 | importStatement
 | usingStatement
 | breakStatement
 | continueStatement
 | expr

breakStatement ::= BREAK_KEYWORD
continueStatement ::= CONTINUE_KEYWORD
includeStatement ::= INCLUDE_KEYWORD LEFT_BRACKET string RIGHT_BRACKET
exportStatement ::= EXPORT_KEYWORD (symbol | macroSymbol) (COMMA_SYM (symbol | macroSymbol))*
importStatement ::= import symbol (COLON_SYM symbol (COMMA_SYM symbol)*)?
usingStatement ::= using symbol (COMMA_SYM symbol)*

expr ::=
   string
 | symbol
