import org.jetbrains.grammarkit.tasks.GenerateLexer
import org.jetbrains.grammarkit.tasks.GenerateParser

buildscript {
	ext.kotlin_version = '1.2.21'
	ext.grammar_kit_version = '2017.1.1'
	repositories {
		mavenCentral()
		maven { url "https://jitpack.io" }
		flatDir { dirs 'lib' }
	}
	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
		classpath "com.github.hurricup:gradle-grammar-kit-plugin:$grammar_kit_version"
	}
}

plugins {
	id 'org.jetbrains.intellij' version '0.2.18'
}

allprojects {
	apply plugin: 'kotlin'
	apply plugin: 'java'
	apply plugin: 'org.jetbrains.grammarkit'
	apply plugin: 'org.jetbrains.intellij'
	intellij {
		String username = System.getProperty("user.name")
		if (username == 'ice1000') {
			localPath '/home/ice1000/.local/share/JetBrains/Toolbox/apps/IDEA-U/ch-0/173.4548.28'
		} else if (username == 'hoshino') {
			localPath '/home/hoshino/文档/IntelliJ'
		}
		updateSinceUntilBuild false
		instrumentCode true
	}
}

sourceSets {
	main {
		kotlin.srcDirs = ['src', 'gen']
		java.srcDirs = ['src', 'gen']
		resources.srcDirs = ['res']
	}

	test {
		kotlin.srcDirs = ['test']
		java.srcDirs = ['test']
		resources.srcDirs = ['testData']
	}
}

def commitHash = { ->
	def stdout = new ByteArrayOutputStream()
	exec {
		commandLine 'git', 'rev-parse', '--short', 'HEAD'
		standardOutput = stdout
	}
	return stdout.toString().trim()
}

String pluginVersion = '0.1.6'
String packageName = 'org.ice1000.julia'

group packageName
if (System.getenv("CI")?.trim()) version "$pluginVersion-${commitHash()}"
else version pluginVersion

repositories {
	mavenCentral()
	flatDir { dirs 'lib' }
}

dependencies {
	compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
	compile name: 'org.eclipse.egit.github.core-2.1.5'
	testCompile group: 'junit', name: 'junit', version: '4.12'
}

compileKotlin {
	kotlinOptions.jvmTarget = '1.8'
}
compileTestKotlin {
	kotlinOptions.jvmTarget = '1.8'
}

patchPluginXml {
	changeNotes = file('res/META-INF/change-notes.html').text
	pluginDescription = file('res/META-INF/description.html').text
	version = pluginVersion
	pluginId = packageName
}

task displayCommitHash() {
	group = 'help'
	description = 'Display the newest commit hash'
	println "Commit hash: ${commitHash()}"
}

task genParser(type: GenerateParser) {
	group = 'build setup'
	description = 'Generate the Parser and PsiElement classes'
	source = 'grammar/julia-grammar.bnf'
	targetRoot = 'gen'
	pathToParser = 'org/ice1000/julia/lang/JuliaParser.java'
	pathToPsiRoot = 'org/ice1000/julia/lang/psi'
	purgeOldFiles = true
}

task genLexer(type: GenerateLexer) {
	dependsOn genParser
	group = 'build setup'
	description = 'Generate the Lexer'
	source = 'grammar/julia-lexer.flex'
	targetDir = 'gen/org/ice1000/julia/lang'
	targetClass = 'JuliaLexer'
	purgeOldFiles = true
}

task genDocfmtParser(type: GenerateParser) {
	group = 'build setup'
	description = 'Generate the Parser for DocumentFormat.jl'
	source = 'grammar/docfmt-grammar.bnf'
	targetRoot = 'gen'
	pathToParser = 'org/ice1000/julia/lang/docfmt/DocfmtParser.java'
	pathToPsiRoot = 'org/ice1000/julia/lang/docfmt/psi'
	purgeOldFiles = true
}

task genDocfmtLexer(type: GenerateLexer) {
	dependsOn genDocfmtParser
	group = 'build setup'
	description = 'Generate the Lexer for DocumentFormat.jl'
	source = 'grammar/docfmt-lexer.flex'
	targetDir = 'gen/org/ice1000/julia/lang/docfmt'
	targetClass = 'DocfmtLexer'
	purgeOldFiles = true
}

buildPlugin.dependsOn genParser
buildPlugin.dependsOn genLexer

buildPlugin.dependsOn genDocfmtParser
buildPlugin.dependsOn genDocfmtLexer
