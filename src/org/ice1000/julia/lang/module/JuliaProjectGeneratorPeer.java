package org.ice1000.julia.lang.module;

import com.intellij.ide.browsers.BrowserLauncher;
import com.intellij.openapi.fileChooser.FileChooserDescriptorFactory;
import com.intellij.openapi.ui.TextBrowseFolderListener;
import com.intellij.openapi.ui.TextFieldWithBrowseButton;
import com.intellij.openapi.ui.ValidationInfo;
import com.intellij.ui.components.labels.LinkLabel;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.ice1000.julia.lang.JuliaBundle;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import java.awt.*;
import java.util.ResourceBundle;

import static org.ice1000.julia.lang.module.UtilsKt.getDefaultExePath;
import static org.ice1000.julia.lang.module.UtilsKt.validateJulia;

public class JuliaProjectGeneratorPeer extends JuliaProjectGeneratorPeerBase {
	private @NotNull LinkLabel<Object> juliaWebsite;
	private @NotNull JLabel usefulText;
	private @NotNull TextFieldWithBrowseButton juliaExeField;
	private @NotNull JPanel mainPanel;

	public JuliaProjectGeneratorPeer(@NotNull JuliaSettings settings) {
		super(settings);
		this.usefulText.setVisible(false);
		juliaWebsite.setListener((label, o) -> BrowserLauncher.getInstance().open(juliaWebsite.getText()), null);
		juliaExeField.addBrowseFolderListener(new TextBrowseFolderListener(FileChooserDescriptorFactory.createSingleFileOrExecutableAppDescriptor()));
		juliaExeField.setText(getDefaultExePath());
	}

	@Nullable @Override public ValidationInfo validate() {
		JuliaSettings settings = getSettings();
		settings.setExePath(juliaExeField.getText());
		settings.initWithExe();
		if (validateJulia(settings)) {
			return null;
		} else return new ValidationInfo(JuliaBundle.message("julia.projects.sdk.invalid"));
	}

	@Override public @NotNull JPanel getComponent() {
		return mainPanel;
	}

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		mainPanel = new JPanel();
		mainPanel.setLayout(new GridLayoutManager(4, 2, new Insets(0, 0, 0, 0), -1, -1));
		juliaWebsite = new LinkLabel();
		juliaWebsite.setIcon(new ImageIcon(getClass().getResource("/icons/julia.png")));
		juliaWebsite.setText("https://julialang.org/downloads/");
		mainPanel.add(juliaWebsite,
			new GridConstraints(2,
				0,
				1,
				2,
				GridConstraints.ANCHOR_WEST,
				GridConstraints.FILL_VERTICAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				null,
				new Dimension(276, 20),
				null,
				0,
				false));
		usefulText = new JLabel();
		usefulText.setHorizontalAlignment(2);
		this.$$$loadLabelText$$$(usefulText,
			ResourceBundle.getBundle("org/ice1000/julia/lang/julia-bundle").getString("julia.modules.selection.help"));
		mainPanel.add(usefulText,
			new GridConstraints(1,
				0,
				1,
				2,
				GridConstraints.ANCHOR_CENTER,
				GridConstraints.FILL_BOTH,
				GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED,
				null,
				null,
				null,
				0,
				false));
		final Spacer spacer1 = new Spacer();
		mainPanel.add(spacer1,
			new GridConstraints(3,
				0,
				1,
				2,
				GridConstraints.ANCHOR_CENTER,
				GridConstraints.FILL_VERTICAL,
				1,
				GridConstraints.SIZEPOLICY_WANT_GROW,
				null,
				null,
				null,
				0,
				false));
		juliaExeField = new TextFieldWithBrowseButton();
		mainPanel.add(juliaExeField,
			new GridConstraints(0,
				1,
				1,
				1,
				GridConstraints.ANCHOR_CENTER,
				GridConstraints.FILL_BOTH,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				null,
				null,
				null,
				0,
				false));
		final JLabel label1 = new JLabel();
		this.$$$loadLabelText$$$(label1,
			ResourceBundle.getBundle("org/ice1000/julia/lang/julia-bundle").getString("julia.modules.selection.exe-label"));
		mainPanel.add(label1,
			new GridConstraints(0,
				0,
				1,
				1,
				GridConstraints.ANCHOR_NORTHWEST,
				GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED,
				null,
				null,
				null,
				0,
				false));
	}

	/**
	 * @noinspection ALL
	 */
	private void $$$loadLabelText$$$(JLabel component, String text) {
		StringBuffer result = new StringBuffer();
		boolean haveMnemonic = false;
		char mnemonic = '\0';
		int mnemonicIndex = -1;
		for (int i = 0; i < text.length(); i++) {
			if (text.charAt(i) == '&') {
				i++;
				if (i == text.length()) break;
				if (!haveMnemonic && text.charAt(i) != '&') {
					haveMnemonic = true;
					mnemonic = text.charAt(i);
					mnemonicIndex = result.length();
				}
			}
			result.append(text.charAt(i));
		}
		component.setText(result.toString());
		if (haveMnemonic) {
			component.setDisplayedMnemonic(mnemonic);
			component.setDisplayedMnemonicIndex(mnemonicIndex);
		}
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return mainPanel;
	}
}
