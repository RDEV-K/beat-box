package org.ice1000.julia.lang.module;

import com.intellij.ide.browsers.BrowserLauncher;
import com.intellij.openapi.fileChooser.FileChooserDescriptorFactory;
import com.intellij.openapi.options.Configurable;
import com.intellij.openapi.options.ConfigurationException;
import com.intellij.openapi.project.Project;
import com.intellij.openapi.ui.TextBrowseFolderListener;
import com.intellij.openapi.ui.TextFieldWithBrowseButton;
import com.intellij.ui.DocumentAdapter;
import com.intellij.ui.components.labels.LinkLabel;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import org.ice1000.julia.lang.JuliaBundle;
import org.jetbrains.annotations.Nls;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;

import javax.swing.*;
import javax.swing.event.DocumentEvent;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NumberFormatter;
import java.awt.*;
import java.text.NumberFormat;
import java.util.ResourceBundle;

import static org.ice1000.julia.lang.module.Julia_project_serviceKt.getJuliaSettings;
import static org.ice1000.julia.lang.module.UtilsKt.*;

public class JuliaProjectConfigurable implements Configurable {
	private @NotNull JPanel mainPanel;
	private @NotNull JFormattedTextField textLimitField;
	private @NotNull JFormattedTextField timeLimitField;
	private @NotNull TextFieldWithBrowseButton importPathField;
	private @NotNull TextFieldWithBrowseButton juliaExeField;
	private @NotNull LinkLabel<Object> juliaWebsite;
	private @NotNull JLabel version;
	private @NotNull TextFieldWithBrowseButton basePathField;
	private @NotNull JuliaSettings settings;

	public JuliaProjectConfigurable(@NotNull Project project) {
		settings = getJuliaSettings(project).getSettings();
		version.setText(settings.getVersion());
		NumberFormat format = NumberFormat.getIntegerInstance();
		format.setGroupingUsed(false);
		DefaultFormatterFactory factory = new DefaultFormatterFactory(new NumberFormatter(format));
		timeLimitField.setFormatterFactory(factory);
		timeLimitField.setValue(settings.getTryEvaluateTimeLimit());
		textLimitField.setFormatterFactory(factory);
		textLimitField.setValue((long) settings.getTryEvaluateTextLimit());
		juliaWebsite.setListener((label, o) -> BrowserLauncher.getInstance().open(juliaWebsite.getText()), null);
		importPathField.setText(settings.getImportPath());
		importPathField.addBrowseFolderListener(new TextBrowseFolderListener(FileChooserDescriptorFactory.createSingleFolderDescriptor(),
			project));
		basePathField.setText(settings.getBasePath());
		basePathField.addBrowseFolderListener(new TextBrowseFolderListener(FileChooserDescriptorFactory.createSingleFolderDescriptor(),
			project));
		juliaExeField.addBrowseFolderListener(new TextBrowseFolderListener(FileChooserDescriptorFactory.createSingleFileOrExecutableAppDescriptor(),
			project));
		juliaExeField.setText(settings.getExePath());
		juliaExeField.getTextField().getDocument().addDocumentListener(new DocumentAdapter() {
			@Override protected void textChanged(DocumentEvent e) {
				String exePath = juliaExeField.getText();
				importPathField.setText(importPathOf(exePath, 800L));
				version.setText(versionOf(exePath, 800L));
				@Nullable String base = tryGetBase(exePath);
				if (base != null) basePathField.setText(base);
			}
		});
	}

	@Override public @Nls String getDisplayName() {
		return JuliaBundle.message("julia.name");
	}

	@Override public @NotNull JPanel createComponent() {
		return mainPanel;
	}

	@Override public boolean isModified() {
		return !settings.getImportPath().equals(importPathField.getText()) ||
			!settings.getBasePath().equals(basePathField.getText()) ||
			!settings.getExePath().equals(juliaExeField.getText()) ||
			settings.getTryEvaluateTextLimit() != (Long) textLimitField.getValue() ||
			settings.getTryEvaluateTimeLimit() != (Long) timeLimitField.getValue();
	}

	@Override public void apply() throws ConfigurationException {
		Object timeLimitFieldValue = timeLimitField.getValue();
		Object textLimitFieldValue = textLimitField.getValue();
		if (!(timeLimitField.getValue() instanceof Number && textLimitField.getValue() instanceof Number))
			throw new ConfigurationException(JuliaBundle.message("julia.modules.try-eval.invalid"));
		settings.setTryEvaluateTextLimit(((Number) textLimitFieldValue).intValue());
		settings.setTryEvaluateTimeLimit(((Number) timeLimitFieldValue).longValue());
		if (!validateJuliaExe(juliaExeField.getText()))
			throw new ConfigurationException(JuliaBundle.message("julia.modules.invalid"));
		settings.setExePath(juliaExeField.getText());
		settings.setVersion(version.getText());
		settings.setBasePath(basePathField.getText());
		settings.setImportPath(importPathField.getText());
	}

	{
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
		$$$setupUI$$$();
	}

	/**
	 * Method generated by IntelliJ IDEA GUI Designer
	 * >>> IMPORTANT!! <<<
	 * DO NOT edit this method OR call it in your code!
	 *
	 * @noinspection ALL
	 */
	private void $$$setupUI$$$() {
		mainPanel = new JPanel();
		mainPanel.setLayout(new GridLayoutManager(13, 2, new Insets(0, 0, 0, 0), -1, -1));
		final Spacer spacer1 = new Spacer();
		mainPanel.add(spacer1,
			new GridConstraints(12,
				0,
				1,
				2,
				GridConstraints.ANCHOR_CENTER,
				GridConstraints.FILL_VERTICAL,
				1,
				GridConstraints.SIZEPOLICY_WANT_GROW,
				null,
				null,
				null,
				0,
				false));
		final JLabel label1 = new JLabel();
		this.$$$loadLabelText$$$(label1,
			ResourceBundle.getBundle("org/ice1000/julia/lang/julia-bundle").getString("julia.modules.try-eval.text-limit"));
		mainPanel.add(label1,
			new GridConstraints(1,
				0,
				1,
				1,
				GridConstraints.ANCHOR_WEST,
				GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED,
				null,
				null,
				null,
				0,
				false));
		final JLabel label2 = new JLabel();
		this.$$$loadLabelText$$$(label2,
			ResourceBundle.getBundle("org/ice1000/julia/lang/julia-bundle").getString("julia.modules.try-eval.time-limit"));
		mainPanel.add(label2,
			new GridConstraints(3,
				0,
				1,
				1,
				GridConstraints.ANCHOR_WEST,
				GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED,
				null,
				null,
				null,
				0,
				false));
		textLimitField = new JFormattedTextField();
		mainPanel.add(textLimitField,
			new GridConstraints(1,
				1,
				1,
				1,
				GridConstraints.ANCHOR_WEST,
				GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW,
				GridConstraints.SIZEPOLICY_FIXED,
				null,
				new Dimension(150, -1),
				null,
				0,
				false));
		timeLimitField = new JFormattedTextField();
		mainPanel.add(timeLimitField,
			new GridConstraints(3,
				1,
				1,
				1,
				GridConstraints.ANCHOR_WEST,
				GridConstraints.FILL_HORIZONTAL,
				GridConstraints.SIZEPOLICY_WANT_GROW,
				GridConstraints.SIZEPOLICY_FIXED,
				null,
				new Dimension(150, -1),
				null,
				0,
				false));
		final JLabel label3 = new JLabel();
		this.$$$loadLabelText$$$(label3,
			ResourceBundle.getBundle("org/ice1000/julia/lang/julia-bundle")
				.getString("julia.modules.try-eval.text-limit.hint"));
		mainPanel.add(label3,
			new GridConstraints(2,
				1,
				1,
				1,
				GridConstraints.ANCHOR_WEST,
				GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED,
				null,
				null,
				null,
				0,
				false));
		final JLabel label4 = new JLabel();
		this.$$$loadLabelText$$$(label4,
			ResourceBundle.getBundle("org/ice1000/julia/lang/julia-bundle")
				.getString("julia.modules.try-eval.time-limit.hint"));
		mainPanel.add(label4,
			new GridConstraints(4,
				1,
				1,
				1,
				GridConstraints.ANCHOR_WEST,
				GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED,
				null,
				null,
				null,
				0,
				false));
		final JLabel label5 = new JLabel();
		this.$$$loadLabelText$$$(label5,
			ResourceBundle.getBundle("org/ice1000/julia/lang/julia-bundle").getString("julia.modules.try-eval.title"));
		mainPanel.add(label5,
			new GridConstraints(0,
				0,
				1,
				2,
				GridConstraints.ANCHOR_WEST,
				GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED,
				null,
				null,
				null,
				0,
				false));
		final JLabel label6 = new JLabel();
		this.$$$loadLabelText$$$(label6,
			ResourceBundle.getBundle("org/ice1000/julia/lang/julia-bundle").getString("julia.modules.import-path.title"));
		mainPanel.add(label6,
			new GridConstraints(9,
				0,
				1,
				1,
				GridConstraints.ANCHOR_WEST,
				GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED,
				null,
				null,
				null,
				0,
				false));
		importPathField = new TextFieldWithBrowseButton();
		mainPanel.add(importPathField,
			new GridConstraints(9,
				1,
				1,
				1,
				GridConstraints.ANCHOR_CENTER,
				GridConstraints.FILL_BOTH,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				null,
				null,
				null,
				0,
				false));
		juliaExeField = new TextFieldWithBrowseButton();
		mainPanel.add(juliaExeField,
			new GridConstraints(7,
				1,
				1,
				1,
				GridConstraints.ANCHOR_CENTER,
				GridConstraints.FILL_BOTH,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				null,
				null,
				null,
				0,
				false));
		final JLabel label7 = new JLabel();
		this.$$$loadLabelText$$$(label7,
			ResourceBundle.getBundle("org/ice1000/julia/lang/julia-bundle").getString("julia.run-config.exe"));
		mainPanel.add(label7,
			new GridConstraints(7,
				0,
				1,
				1,
				GridConstraints.ANCHOR_NORTHWEST,
				GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED,
				null,
				null,
				null,
				0,
				false));
		final JLabel label8 = new JLabel();
		this.$$$loadLabelText$$$(label8,
			ResourceBundle.getBundle("org/ice1000/julia/lang/julia-bundle").getString("julia.modules.title"));
		mainPanel.add(label8,
			new GridConstraints(6,
				0,
				1,
				2,
				GridConstraints.ANCHOR_WEST,
				GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED,
				null,
				null,
				null,
				0,
				false));
		juliaWebsite = new LinkLabel();
		juliaWebsite.setIcon(new ImageIcon(getClass().getResource("/icons/julia.png")));
		juliaWebsite.setText("https://julialang.org/downloads/");
		mainPanel.add(juliaWebsite,
			new GridConstraints(11,
				0,
				1,
				2,
				GridConstraints.ANCHOR_WEST,
				GridConstraints.FILL_VERTICAL,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				null,
				null,
				null,
				0,
				false));
		final JLabel label9 = new JLabel();
		this.$$$loadLabelText$$$(label9,
			ResourceBundle.getBundle("org/ice1000/julia/lang/julia-bundle").getString("julia.modules.version"));
		mainPanel.add(label9,
			new GridConstraints(8,
				0,
				1,
				1,
				GridConstraints.ANCHOR_WEST,
				GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED,
				null,
				null,
				null,
				0,
				false));
		version = new JLabel();
		this.$$$loadLabelText$$$(version,
			ResourceBundle.getBundle("org/ice1000/julia/lang/julia-bundle").getString("julia.modules.sdk.unknown-version"));
		mainPanel.add(version,
			new GridConstraints(8,
				1,
				1,
				1,
				GridConstraints.ANCHOR_WEST,
				GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED,
				null,
				null,
				null,
				0,
				false));
		final JSeparator separator1 = new JSeparator();
		mainPanel.add(separator1,
			new GridConstraints(5,
				0,
				1,
				2,
				GridConstraints.ANCHOR_CENTER,
				GridConstraints.FILL_BOTH,
				GridConstraints.SIZEPOLICY_WANT_GROW,
				GridConstraints.SIZEPOLICY_CAN_GROW,
				null,
				null,
				null,
				0,
				false));
		final JLabel label10 = new JLabel();
		this.$$$loadLabelText$$$(label10,
			ResourceBundle.getBundle("org/ice1000/julia/lang/julia-bundle").getString("julia.modules.base-path.title"));
		mainPanel.add(label10,
			new GridConstraints(10,
				0,
				1,
				1,
				GridConstraints.ANCHOR_WEST,
				GridConstraints.FILL_NONE,
				GridConstraints.SIZEPOLICY_FIXED,
				GridConstraints.SIZEPOLICY_FIXED,
				null,
				null,
				null,
				0,
				false));
		basePathField = new TextFieldWithBrowseButton();
		mainPanel.add(basePathField,
			new GridConstraints(10,
				1,
				1,
				1,
				GridConstraints.ANCHOR_CENTER,
				GridConstraints.FILL_BOTH,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
				null,
				null,
				null,
				0,
				false));
	}

	/**
	 * @noinspection ALL
	 */
	private void $$$loadLabelText$$$(JLabel component, String text) {
		StringBuffer result = new StringBuffer();
		boolean haveMnemonic = false;
		char mnemonic = '\0';
		int mnemonicIndex = -1;
		for (int i = 0; i < text.length(); i++) {
			if (text.charAt(i) == '&') {
				i++;
				if (i == text.length()) break;
				if (!haveMnemonic && text.charAt(i) != '&') {
					haveMnemonic = true;
					mnemonic = text.charAt(i);
					mnemonicIndex = result.length();
				}
			}
			result.append(text.charAt(i));
		}
		component.setText(result.toString());
		if (haveMnemonic) {
			component.setDisplayedMnemonic(mnemonic);
			component.setDisplayedMnemonicIndex(mnemonicIndex);
		}
	}

	/**
	 * @noinspection ALL
	 */
	public JComponent $$$getRootComponent$$$() {
		return mainPanel;
	}
}
