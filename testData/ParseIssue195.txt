FILE
  PsiComment(BLOCK_COMMENT_START)('#=')
  PsiComment(BLOCK_COMMENT_BODY)('\nParseIssue195:\n- Julia version: 1.0.0\n- Author: zxj5470\n- Date: 2018-08-19\n')
  PsiComment(BLOCK_COMMENT_END)('=#')
  PsiElement(EOL)('\n\n')
  JuliaStatementsImpl(STATEMENTS)
    JuliaStringImpl(STRING)
      PsiElement(QUOTE_START)('"')
      JuliaStringContentImpl(STRING_CONTENT)
        PsiElement(REGULAR_STRING_PART_LITERAL)('abstractarray.jl')
      PsiElement(QUOTE_END)('"')
    PsiElement(EOL)('\n')
    JuliaApplyIndexOpImpl(APPLY_INDEX_OP)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('a')
      PsiElement(LEFT_M_BRACKET)('[')
      JuliaSpliceIndexingImpl(SPLICE_INDEXING)
        JuliaExprWrapperImpl(EXPR_WRAPPER)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('i')
        PsiElement(SLICE_SYM)('...')
      PsiElement(RIGHT_M_BRACKET)(']')
    PsiElement(EOL)('\n')
    JuliaAssignOpImpl(ASSIGN_OP)
      JuliaApplyIndexOpImpl(APPLY_INDEX_OP)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('dest')
        PsiElement(LEFT_M_BRACKET)('[')
        JuliaAssignLevelOperatorIndexingImpl(ASSIGN_LEVEL_OPERATOR_INDEXING)
          JuliaExprWrapperImpl(EXPR_WRAPPER)
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('i')
          JuliaAssignLevelOperatorImpl(ASSIGN_LEVEL_OPERATOR)
            PsiElement(PLUS_ASSIGN_SYM)('+=')
          JuliaExprWrapperImpl(EXPR_WRAPPER)
            JuliaIntegerImpl(INTEGER)
              PsiElement(INT_LITERAL)('1')
        PsiElement(RIGHT_M_BRACKET)(']')
      PsiElement(EQ_SYM)('=')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('a')
    PsiElement(EOL)('\n')
    JuliaAssignOpImpl(ASSIGN_OP)
      JuliaApplyIndexOpImpl(APPLY_INDEX_OP)
        JuliaSymbolImpl(SYMBOL)
          PsiElement(SYM)('B')
        PsiElement(LEFT_M_BRACKET)('[')
        JuliaRangeIndexingImpl(RANGE_INDEXING)
          JuliaExprWrapperImpl(EXPR_WRAPPER)
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('pos')
          PsiElement(COLON_SYM)(':')
          JuliaExprWrapperImpl(EXPR_WRAPPER)
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('p1')
        PsiElement(COMMA_SYM)(',')
        JuliaAllRangeIndexingImpl(ALL_RANGE_INDEXING)
          PsiElement(COLON_SYM)(':')
        PsiElement(RIGHT_M_BRACKET)(']')
      PsiElement(EQ_SYM)('=')
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('Ak')
    PsiElement(EOL)('\n\n')
    JuliaCompactFunctionImpl(COMPACT_FUNCTION)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('concatenate_setindex!')
      JuliaFunctionSignatureImpl(FUNCTION_SIGNATURE)
        PsiElement(LEFT_BRACKET)('(')
        JuliaTypedNamedVariableImpl(TYPED_NAMED_VARIABLE)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('R')
        PsiElement(COMMA_SYM)(',')
        JuliaTypedNamedVariableImpl(TYPED_NAMED_VARIABLE)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('v')
        PsiElement(COMMA_SYM)(',')
        JuliaTypedNamedVariableImpl(TYPED_NAMED_VARIABLE)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('I')
        PsiElement(SLICE_SYM)('...')
        PsiElement(RIGHT_BRACKET)(')')
      PsiElement(EQ_SYM)('=')
      JuliaBracketedExprImpl(BRACKETED_EXPR)
        PsiElement(LEFT_BRACKET)('(')
        JuliaStatementsImpl(STATEMENTS)
          JuliaAssignOpImpl(ASSIGN_OP)
            JuliaApplyIndexOpImpl(APPLY_INDEX_OP)
              JuliaSymbolImpl(SYMBOL)
                PsiElement(SYM)('R')
              PsiElement(LEFT_M_BRACKET)('[')
              JuliaSpliceIndexingImpl(SPLICE_INDEXING)
                JuliaExprWrapperImpl(EXPR_WRAPPER)
                  JuliaSymbolImpl(SYMBOL)
                    PsiElement(SYM)('I')
                PsiElement(SLICE_SYM)('...')
              PsiElement(RIGHT_M_BRACKET)(']')
            PsiElement(ASSIGN_SYM)('.=')
            JuliaTupleImpl(TUPLE)
              PsiElement(LEFT_BRACKET)('(')
              JuliaSymbolImpl(SYMBOL)
                PsiElement(SYM)('v')
              PsiElement(COMMA_SYM)(',')
              PsiElement(RIGHT_BRACKET)(')')
          PsiElement(SEMICOLON_SYM)(';')
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('R')
        PsiElement(RIGHT_BRACKET)(')')
    PsiElement(EOL)('\n\n')
    JuliaCompactFunctionImpl(COMPACT_FUNCTION)
      JuliaSymbolImpl(SYMBOL)
        PsiElement(SYM)('concatenate_setindex!')
      JuliaFunctionSignatureImpl(FUNCTION_SIGNATURE)
        PsiElement(LEFT_BRACKET)('(')
        JuliaTypedNamedVariableImpl(TYPED_NAMED_VARIABLE)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('R')
        PsiElement(COMMA_SYM)(',')
        JuliaTypedNamedVariableImpl(TYPED_NAMED_VARIABLE)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('X')
          JuliaTypeAnnotationImpl(TYPE_ANNOTATION)
            PsiElement(DOUBLE_COLON)('::')
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('AbstractArray')
        PsiElement(COMMA_SYM)(',')
        JuliaTypedNamedVariableImpl(TYPED_NAMED_VARIABLE)
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('I')
        PsiElement(SLICE_SYM)('...')
        PsiElement(RIGHT_BRACKET)(')')
      PsiElement(EQ_SYM)('=')
      JuliaTupleImpl(TUPLE)
        PsiElement(LEFT_BRACKET)('(')
        JuliaAssignOpImpl(ASSIGN_OP)
          JuliaApplyIndexOpImpl(APPLY_INDEX_OP)
            JuliaSymbolImpl(SYMBOL)
              PsiElement(SYM)('R')
            PsiElement(LEFT_M_BRACKET)('[')
            JuliaSpliceIndexingImpl(SPLICE_INDEXING)
              JuliaExprWrapperImpl(EXPR_WRAPPER)
                JuliaSymbolImpl(SYMBOL)
                  PsiElement(SYM)('I')
              PsiElement(SLICE_SYM)('...')
            PsiElement(RIGHT_M_BRACKET)(']')
          PsiElement(EQ_SYM)('=')
          JuliaSymbolImpl(SYMBOL)
            PsiElement(SYM)('X')
        PsiElement(RIGHT_BRACKET)(')')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#\n')
    PsiComment(LINE_COMMENT)('# "abstractarraymath.jl"')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# *(x::AbstractArray{<:Number,2}) = x')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#\n')
    PsiComment(LINE_COMMENT)('# "base/strings/io.jl"')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# ==(a::AbstractString, b::AbstractString) = cmp(a, b) == 0')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# ⊇(l, r) = r ⊆ l')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# # < = <= and unicode...')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#\n')
    PsiComment(LINE_COMMENT)('# """ these success')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# '\a' <= c')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# c <= '\r'')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#\n')
    PsiComment(LINE_COMMENT)('# but failed:')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# """')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#\n')
    PsiComment(LINE_COMMENT)('# '\a' <= c <= '\r'')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#\n')
    PsiComment(LINE_COMMENT)('# "abstractarraymath.jl"')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# y[1][isa(v, KeySet) ? 1 : 2]')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#\n')
    PsiComment(LINE_COMMENT)('# pairs(collection) = Generator(=>, keys(collection), values(collection))')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#\n')
    PsiComment(LINE_COMMENT)('# isin = in(pair, r, ==)')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#\n')
    PsiComment(LINE_COMMENT)('# function ==(l::AbstractDict, r::AbstractDict)')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# end')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#\n')
    PsiComment(LINE_COMMENT)('# "abstractset.jl"')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# function union end')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#\n')
    PsiComment(LINE_COMMENT)('# # some unicode assign like ∪ ∩ ⊆ ∉ ∈')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# const ∪ = union')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# const ∩ = intersect')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# const ⊆ = issubset')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#\n')
    PsiComment(LINE_COMMENT)('# "accumulate.jl"')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# # cannot parse as `compact function` but `where statement`.')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# cumsum!(B::AbstractArray{T}, A; dims::Integer) where {T} = accumulate!(add_sum, B, A, dims=dims)')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#\n')
    PsiComment(LINE_COMMENT)('# # `isa`')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# if nt isa NamedTuple{(:init,)}')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# end')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#\n')
    PsiComment(LINE_COMMENT)('# "array.jl"')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# # where T where N.')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# # only one `where T` will parse OK')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# function reshape(a::Array{T,N}, dims::NTuple{N,Int}) where T where N')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#\n')
    PsiComment(LINE_COMMENT)('# # endOfLine after `a`')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# Union{eltype(inds), Nothing}[')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('#         get(bdict, i, nothing) for i in a')
    PsiElement(EOL)('\n')
    PsiComment(LINE_COMMENT)('# ]')
    PsiElement(EOL)('\n')
  PsiComment(LINE_COMMENT)('#\n')
  PsiComment(LINE_COMMENT)('# filter(f, As::AbstractArray) = As[map(f, As)::AbstractArray{Bool}]')